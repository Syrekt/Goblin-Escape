let SessionLoad = 1
let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
let v:this_session=expand("<sfile>:p")
silent only
silent tabonly
cd ~/Documents/goblin-escape
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
let s:shortmess_save = &shortmess
if &shortmess =~ 'A'
  set shortmess=aoOA
else
  set shortmess=aoO
endif
badd +3 Scripts/inventory_item.gd
badd +194 Scripts/kalin.gd
badd +2 Scripts/Items.gd
badd +1 Scripts/inventory_slot.gd
badd +3 Scripts/inventory.gd
badd +6 Objects/inventory_ui.gd
badd +5 Inventory/inv_item.gd
badd +6 Inventory/inv.gd
badd +1 Inventory/inv_slot.gd
argglobal
%argdel
set stal=2
tabnew +setlocal\ bufhidden=wipe
tabrewind
edit Objects/inventory_ui.gd
let s:save_splitbelow = &splitbelow
let s:save_splitright = &splitright
set splitbelow splitright
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd _ | wincmd |
split
1wincmd k
wincmd w
wincmd w
wincmd _ | wincmd |
split
1wincmd k
wincmd w
let &splitbelow = s:save_splitbelow
let &splitright = s:save_splitright
wincmd t
let s:save_winminheight = &winminheight
let s:save_winminwidth = &winminwidth
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 26 + 28) / 56)
exe 'vert 1resize ' . ((&columns * 119 + 120) / 240)
exe '2resize ' . ((&lines * 26 + 28) / 56)
exe 'vert 2resize ' . ((&columns * 119 + 120) / 240)
exe '3resize ' . ((&lines * 26 + 28) / 56)
exe 'vert 3resize ' . ((&columns * 120 + 120) / 240)
exe '4resize ' . ((&lines * 26 + 28) / 56)
exe 'vert 4resize ' . ((&columns * 120 + 120) / 240)
argglobal
balt Inventory/inv.gd
setlocal fdm=marker
setlocal fde=GDScriptFoldLevel()
setlocal fmr=region,endregion
setlocal fdi=
setlocal fdl=0
setlocal fml=0
setlocal fdn=1
setlocal fen
let s:l = 6 - ((5 * winheight(0) + 13) / 26)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 6
normal! 05|
wincmd w
argglobal
if bufexists(fnamemodify("Inventory/inv_item.gd", ":p")) | buffer Inventory/inv_item.gd | else | edit Inventory/inv_item.gd | endif
if &buftype ==# 'terminal'
  silent file Inventory/inv_item.gd
endif
balt Scripts/inventory_item.gd
setlocal fdm=marker
setlocal fde=GDScriptFoldLevel()
setlocal fmr=region,endregion
setlocal fdi=
setlocal fdl=0
setlocal fml=0
setlocal fdn=1
setlocal fen
let s:l = 5 - ((4 * winheight(0) + 13) / 26)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 5
normal! 0
wincmd w
argglobal
if bufexists(fnamemodify("Inventory/inv.gd", ":p")) | buffer Inventory/inv.gd | else | edit Inventory/inv.gd | endif
if &buftype ==# 'terminal'
  silent file Inventory/inv.gd
endif
balt Scripts/inventory.gd
setlocal fdm=marker
setlocal fde=GDScriptFoldLevel()
setlocal fmr=region,endregion
setlocal fdi=
setlocal fdl=0
setlocal fml=0
setlocal fdn=1
setlocal fen
let s:l = 5 - ((4 * winheight(0) + 13) / 26)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 5
normal! 020|
wincmd w
argglobal
if bufexists(fnamemodify("Inventory/inv_slot.gd", ":p")) | buffer Inventory/inv_slot.gd | else | edit Inventory/inv_slot.gd | endif
if &buftype ==# 'terminal'
  silent file Inventory/inv_slot.gd
endif
balt Scripts/inventory_slot.gd
setlocal fdm=marker
setlocal fde=GDScriptFoldLevel()
setlocal fmr=region,endregion
setlocal fdi=
setlocal fdl=0
setlocal fml=0
setlocal fdn=1
setlocal fen
let s:l = 1 - ((0 * winheight(0) + 13) / 26)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 1
normal! 0
wincmd w
exe '1resize ' . ((&lines * 26 + 28) / 56)
exe 'vert 1resize ' . ((&columns * 119 + 120) / 240)
exe '2resize ' . ((&lines * 26 + 28) / 56)
exe 'vert 2resize ' . ((&columns * 119 + 120) / 240)
exe '3resize ' . ((&lines * 26 + 28) / 56)
exe 'vert 3resize ' . ((&columns * 120 + 120) / 240)
exe '4resize ' . ((&lines * 26 + 28) / 56)
exe 'vert 4resize ' . ((&columns * 120 + 120) / 240)
tabnext
edit Scripts/kalin.gd
let s:save_splitbelow = &splitbelow
let s:save_splitright = &splitright
set splitbelow splitright
wincmd _ | wincmd |
split
1wincmd k
wincmd _ | wincmd |
vsplit
1wincmd h
wincmd w
wincmd w
let &splitbelow = s:save_splitbelow
let &splitright = s:save_splitright
wincmd t
let s:save_winminheight = &winminheight
let s:save_winminwidth = &winminwidth
set winminheight=0
set winheight=1
set winminwidth=0
set winwidth=1
exe '1resize ' . ((&lines * 42 + 28) / 56)
exe 'vert 1resize ' . ((&columns * 120 + 120) / 240)
exe '2resize ' . ((&lines * 42 + 28) / 56)
exe 'vert 2resize ' . ((&columns * 119 + 120) / 240)
exe '3resize ' . ((&lines * 10 + 28) / 56)
argglobal
setlocal fdm=marker
setlocal fde=GDScriptFoldLevel()
setlocal fmr=region,endregion
setlocal fdi=
setlocal fdl=0
setlocal fml=0
setlocal fdn=1
setlocal fen
let s:l = 42 - ((20 * winheight(0) + 21) / 42)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 42
normal! 047|
wincmd w
argglobal
if bufexists(fnamemodify("Scripts/kalin.gd", ":p")) | buffer Scripts/kalin.gd | else | edit Scripts/kalin.gd | endif
if &buftype ==# 'terminal'
  silent file Scripts/kalin.gd
endif
setlocal fdm=marker
setlocal fde=GDScriptFoldLevel()
setlocal fmr=region,endregion
setlocal fdi=
setlocal fdl=0
setlocal fml=0
setlocal fdn=1
setlocal fen
84
normal! zo
let s:l = 196 - ((34 * winheight(0) + 21) / 42)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 196
normal! 023|
wincmd w
argglobal
enew
balt Scripts/kalin.gd
setlocal fdm=manual
setlocal fde=0
setlocal fmr=region,endregion
setlocal fdi=#
setlocal fdl=0
setlocal fml=0
setlocal fdn=1
setlocal fen
wincmd w
exe '1resize ' . ((&lines * 42 + 28) / 56)
exe 'vert 1resize ' . ((&columns * 120 + 120) / 240)
exe '2resize ' . ((&lines * 42 + 28) / 56)
exe 'vert 2resize ' . ((&columns * 119 + 120) / 240)
exe '3resize ' . ((&lines * 10 + 28) / 56)
tabnext 1
set stal=1
if exists('s:wipebuf') && len(win_findbuf(s:wipebuf)) == 0 && getbufvar(s:wipebuf, '&buftype') isnot# 'terminal'
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20
let &shortmess = s:shortmess_save
let &winminheight = s:save_winminheight
let &winminwidth = s:save_winminwidth
let s:sx = expand("<sfile>:p:r")."x.vim"
if filereadable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &g:so = s:so_save | let &g:siso = s:siso_save
set hlsearch
nohlsearch
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
